{
	"info": {
		"_postman_id": "9abfb3cf-e307-429c-b997-974ca3e7316b",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 2. Статус код 200\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"}); // 3. Проверить, что в body приходит правильный string."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 2. Статус код 200\r",
							"\r",
							"let respData = pm.response.json() // 3. Спарсить response body в json.\r",
							"let reqData = request.data // 7. Спарсить request.\r",
							"let response_name = respData.name\r",
							"let response_age = +respData.age\r",
							"let response_salary = respData.salary\r",
							"let request_name = reqData.name\r",
							"let request_age = +reqData.age\r",
							"let request_salary = +reqData.salary\r",
							"let u_salary_1_5_year = respData.family.u_salary_1_5_year\r",
							"\r",
							"pm.test(\"name checking\", function () {\r",
							"    pm.expect(response_name).to.eql(\"Artiom\");\r",
							"}); // 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"age checking\", function () {\r",
							"    pm.expect(response_age).to.eql(24);\r",
							"}); // 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"salary checking\", function () {\r",
							"    pm.expect(response_salary).to.eql(1500);\r",
							"}); // 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"checking name from req\", function () {\r",
							"    pm.expect(response_name).to.eql(request_name);\r",
							"}); // 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"checking age from req\", function () {\r",
							"    pm.expect(response_age).to.eql(request_age);\r",
							"}); // 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"checking salary from req\", function () {\r",
							"    pm.expect(response_salary).to.eql(request_salary);\r",
							"}); // 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"console.log(respData.family) // 11. Вывести в консоль параметр family из response.\r",
							"console.log(u_salary_1_5_year)\r",
							"\r",
							"pm.test(\"checking u_salary_1_5_year\", function () {\r",
							"    pm.expect(u_salary_1_5_year).to.eql(request_salary * 4);\r",
							"}); // 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							" \r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Artiom",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 2. Статус код 200\r",
							"\r",
							"let respData = pm.response.json(); // 3. Спарсить response body в json.\r",
							"let reqData = pm.request.url.query.toObject() // 4. Спарсить request.\r",
							"let resp_name = respData.name\r",
							"let req_name = reqData.name\r",
							"let req_age = reqData.age\r",
							"let resp_age = respData.age\r",
							"let req_salary = +reqData.salary\r",
							"let resp_salary = respData.salary\r",
							"\r",
							"\r",
							"pm.test(\"Checking name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"}); // 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Checking age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"}); // 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Checking salary\", function () {\r",
							"   pm.expect(resp_salary).to.eql(req_salary);\r",
							"}); // 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"console.log(respData.family) // 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(respData.family.pets.dog) // 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"Parameter dog has parametr name\", function() {\r",
							"    pm.expect(respData.family.pets.dog).to.have.any.keys(\"name\");\r",
							"}); // 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"Parameter dog has parametr age\", function() {\r",
							"    pm.expect(respData.family.pets.dog).to.have.any.keys(\"age\");\r",
							"}); // 9. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Checking name Luky\", function () {\r",
							"    pm.expect(respData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"}); // 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Checking age 4\", function () {\r",
							"    pm.expect(respData.family.pets.dog.age).to.eql(4);\r",
							"}); // 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Artiom&age=24&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Artiom"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 2. Статус код 200\r",
							"\r",
							"let respData = pm.response.json(); // 3. Спарсить response body в json.\r",
							"let reqData = pm.request.url.query.toObject() // 4. Спарсить request.\r",
							"let respName = respData.name\r",
							"let reqName = reqData.name\r",
							"let respAge = respData.age\r",
							"let reqAge = +reqData.age\r",
							"let reqSalary = +reqData.salary\r",
							"let respSalary = respData.salary\r",
							"let zRespSalary = respSalary[0]\r",
							"let fRespSalary = +respSalary[1]\r",
							"let sRespSalary = +respSalary[2]\r",
							"\r",
							"pm.test(\"Checking name from request\", function () {\r",
							"   pm.expect(respName).to.eql(reqName);\r",
							"}); // 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Checking age from request\", function () {\r",
							"   pm.expect(respAge).to.eql(reqAge);\r",
							"}); // 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"console.log(reqSalary) // 7. Вывести в консоль параметр salary из request.\r",
							"console.log(respSalary) // 8. Вывести в консоль параметр salary из response.\r",
							"console.log(respSalary[0]) // 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(respSalary[1]) // 10. Вывести в консоль 1-й элемент параметра salary из response.\r",
							"console.log(respSalary[2]) // 11. Вывести в консоль 2-й элемент параметра salary из response.\r",
							"\r",
							"pm.test(\"Checking 0 element = reqSalary\", function () {\r",
							"   pm.expect(zRespSalary).to.eql(reqSalary);\r",
							"}); // 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Checking 1 elemtnt = salary*2\", function () {\r",
							"    pm.expect(fRespSalary).to.eql(reqSalary*2);\r",
							"}); // 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Checking 2 elemtnt = salary*3\", function () {\r",
							"    pm.expect(sRespSalary).to.eql(reqSalary*3);\r",
							"}); // 14. Проверить, что 2-й элемент параметра salary равен salary*3\r",
							"\r",
							"pm.environment.set(\"name\", reqName); // 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"age\", reqAge); // 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"salary\", reqSalary); // 20. Передать в окружение переменную salary\r",
							"\r",
							"for (key in respSalary) {\r",
							"    console.log(respSalary[key])\r",
							"} // 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Artiom&age=25&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Artiom"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});  // 5. Статус код 200\r",
							"\r",
							"let respData = pm.response.json(); // 6. Спарсить response body в json.\r",
							"let reqData = request.data // 7. Спарсить request.\r",
							"let respSalary = respData.start_qa_salary\r",
							"let reqSalary = +reqData.salary\r",
							"let resp_qa_salary_after_6_months = respData.qa_salary_after_6_months\r",
							"let resp_qa_salary_after_12_months = respData.qa_salary_after_12_months\r",
							"let resp_qa_salary_after_1_5_year = respData[\"qa_salary_after_1.5_year\"]\r",
							"let resp_qa_salary_after_3_5_years = respData[\"qa_salary_after_3.5_years\"]\r",
							"let resp_u_name_salary = respData.person.u_name[1]\r",
							"let resp_u_age = respData.person.u_age\r",
							"let reqAge = +reqData.age\r",
							"let resp_u_salary_5_years = respData.person.u_salary_5_years\r",
							"let respPerson = respData.person\r",
							"\r",
							"\r",
							"pm.test(\"Checking start_qa_salary\", function() {\r",
							"    pm.expect(respData).to.have.any.keys(\"start_qa_salary\");\r",
							"}); // 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"Checking qa_salary_after_6_months\", function() {\r",
							"    pm.expect(respData).to.have.any.keys(\"qa_salary_after_6_months\");\r",
							"}); // 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"Checking qa_salary_after_12_months\", function() {\r",
							"    pm.expect(respData).to.have.any.keys(\"qa_salary_after_12_months\");\r",
							"}); // 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Checking qa_salary_after_1.5_year\", function() {\r",
							"    pm.expect(respData).to.have.any.keys(\"qa_salary_after_1.5_year\");\r",
							"}); // 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Checking qa_salary_after_3.5_years\", function() {\r",
							"    pm.expect(respData).to.have.any.keys(\"qa_salary_after_3.5_years\");\r",
							"}); // 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Checking person\", function() {\r",
							"    pm.expect(respData).to.have.any.keys(\"person\");\r",
							"}); // 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"Checking salary from request\", function () {\r",
							"   pm.expect(respSalary).to.eql(reqSalary);\r",
							"}); // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Checking salary after 6 months\", function () {\r",
							"    pm.expect(resp_qa_salary_after_6_months).to.eql(reqSalary*2);\r",
							"}); // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Checking salary after 12 months\", function () {\r",
							"    pm.expect(resp_qa_salary_after_12_months).to.eql(reqSalary*2.7);\r",
							"}); // 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Checking salary after 1.5 year\", function () {\r",
							"    pm.expect(resp_qa_salary_after_1_5_year).to.eql(reqSalary*3.3); \r",
							"}); // 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"resp_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_qa_salary_after_3_5_years).to.eql(reqSalary*3.8); \r",
							"}); // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Checking response u_name salary\", function () {\r",
							"    pm.expect(resp_u_name_salary).to.eql(reqSalary);\r",
							"}); // 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Checking response u_age\", function () {\r",
							"    pm.expect(resp_u_age).to.eql(reqAge);\r",
							"}); // 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Checking salary after 5 years\", function () {\r",
							"    pm.expect(resp_u_salary_5_years).to.eql(reqSalary*4.2);\r",
							"}); // 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"Object.keys(respPerson).forEach(key=>{\r",
							"    console.log(key, respPerson[key])\r",
							"}) // 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "age",
							"value": "24",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1500",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}